package runner

import (
	"sync"

	"github.com/zomasec/CVE-2024-4577/config"
	"github.com/zomasec/CVE-2024-4577/pkg/exploit"

)

var cfg = config.Init()

type Options struct {
	HostsFile   string
	Hosts        []string
	Concurrency int
	Timeout     int
}

func New(opts *Options) *Options {
	return &Options{
		HostsFile:   opts.HostsFile,
		Hosts:        opts.Hosts,
		Concurrency: opts.Concurrency,
		Timeout:     opts.Timeout,
	}
}

// Run starts the scanning process with the provided options
func (r *Options) Run() {
	cfg.Logger.INFO("%d is the num of hosts to scan", len(r.Hosts))
	
	var wg sync.WaitGroup
	sem := make(chan struct{}, r.Concurrency)
	
	for _, h := range r.Hosts {
		wg.Add(1)
		go func(host string) {
			defer wg.Done()
			sem <- struct{}{}
			exploit.CheckExploit(host, r.Timeout)
			<-sem
		}(h)
	}
	
	wg.Wait()
}
