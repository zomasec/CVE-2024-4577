package runner

import (
	"fmt"
	"sync"
	"time"

	"github.com/zomasec/CVE-2024-4577/config"
	"github.com/zomasec/CVE-2024-4577/pkg/exploit"
	"github.com/zomasec/logz"
)

var (
	cfg = config.Init()
)
type Options struct {
	HostsFile   string
	Hosts        []string
	Concurrency int
	Timeout     int
}

type Result struct {
	Results []*exploit.Result
	ScanedHosts int
	Errors   int
	TimeTaken string
}

func New(opts *Options) *Options {
	return opts
}

// Run starts the scanning process with the provided options
func (r *Options) Run() {
	cfg.Logger.INFO("Started scanning for %d of hosts", len(r.Hosts))
	results := &Result{
		Results: make([]*exploit.Result, 0),
		ScanedHosts: len(r.Hosts),
	}
	var wg sync.WaitGroup
	clevel := make(chan struct{}, r.Concurrency)
	
	startTime := time.Now()

	for _, h := range r.Hosts {
		wg.Add(1)
		go func(host string) {
			defer wg.Done()
			clevel <- struct{}{}
			res := exploit.CheckExploit(host, r.Timeout)

			if res.Type == exploit.Error {
				results.Errors++
			} else if res.Vulnerable {
				cfg.Logger.INFO("Host %s is vulnerable", res.Host)
				logz.NewLogger("VULN", logz.Blue, fmt.Sprintf("IP %s is vulnerable to CVE-2024-4577", res.Host)).Log()	
				results.ScanedHosts++
			}

			<-clevel
		}(h)
	}
	
	wg.Wait()

	results.TimeTaken = time.Since(startTime).String()

	cfg.Logger.INFO("Finished scanning for %d hosts in time %s with %d errors", results.ScanedHosts, results.TimeTaken, results.Errors)

}
